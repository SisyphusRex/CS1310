Graphs
Specifically, unDirected Graphs:
 the edges are UNORDERED pairs of vertices
Parallel Edges
 multiple edges between same pair of vertices
Simple Graph
 no parallel edges or self-loops
Complete Graph
 simple graph with exactly one edge between each pair of vertices
Edge Set V
 {{a,b}, {...,...},...}
 whereas directed graph contains tuples {(a,b)...}

Incident
 edge that is associated with vertices v and w
 For Digraphs
  incident edges are only in-degree edges
Adjacent
 vertices that share an edge

Degree
    number of neighbors a vertex has

Total degree
    sum of degrees of all vertices
    2 * number of edges
Regular Graph
    all vertices have the same degree
d-Regular Graph
    all vertices have degree d

Complete Graph K_n
    edge between every pair of vertices
    AKA clique
Cycle C_n
    edges form a ring
Hypercube Q_n
    2^n vertices
K_(n,m)
    vertices in two sets, n and m
    no edges in same sets
    every vertex in one set has edge to every vertex of other set

Adjacency List Representation
    Each vertex has list of neighbors in table
Matrix Representation
    Vertices on both axes
    1 indicates edge, 0 no edge

Isomorphic
    correspondence between the vertex sets of each graph such that:
        there is an edge between two vertices of one graph iff
        ther is an edge between corresponding vertices of second graph
Degree Sequence
    list of degrees of all vertices in decreasing order

Walks, etc.
    SEE Digraphs in relations.txt
Walk:
    starts at vertex and ends at vertex, series of alternating vertexes and edges
    length= number of edges
    Closed: ends at same vertex
    Open: not at same vertex
Trail:
    walk with no repeated edges
Path:
    open walk with no repeated vertexes
Circuit:
    closed Trail
Cycle:
    circuit of length at least 1 which no vertex occurs more than once (except start and end)

Connected Vertices
    walk between u and v
    if every pair connected, graph is connected, otherwise disconnected
Isolated vertex:
    not connected with any other vertices
Connected Component:
    if another vertex is added to set, then it will be disconnected

k-Vertex-Connected
    contains at least k+1 vertices and remains connected after any k-1 vertices removed from graph
Vertex Connectivity
    largest k such that the graph is k-vertex-connected
    κ(G)
    OR
    minimum number of vertices which would disconnect the graph

k-Edge-Connected
    removing k-1 or fewer edges results in connected graph
Edge Connectivity:
    largest k such that the graph is k-edge-connected
    λ(G)
    OR
    minimum number of edges that would disconnect the graph

Euler Circuit:
    contains every edge and every vertex
    every vertex has even degree
    IF G is connected and every vertex is even degree
        THEN Euler circuit exists


