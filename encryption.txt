Alice is sender
Bob is receiver
Eve is eavesdropper
m is plaintext
c is ciphertext
k is secret key
M is set of all possible plaintexts
C is set of all possible ciphertexts

Consider cryptosystem in which set of possible plaintexts is Z_N for some integer N.
Alice and Bob share a secret number k ∈ Z_N
To encrypt plaintext m ∈ Z_N:
c = (m + k) mod N
Decryption (inverse):
m = (c - k) mod N

Symmetric Key Cryptosystem
  Alice and Bob share same key, and must meet in advance to share the key.

Requirements:
  One-to-one encryption
    if m≠m' and m,m' ∈ Z_N, then (m+k)mod N ≠ (m' + k) mod N
  Decryption is inverse of encryption
    if m ∈ Z_N then (((m+k)mod N) - k) mod N = m

Public Key Cryptography
  Bob provides a public encryption key for people to send him an encrypted message.
  Bob holds a private decryption key.
  NOTE: this relies on the assumption that decrypting the message without the private key is very difficult
    In fact, the public key cryptosystem relies on the fact that a brute force method to determine which m produces c is prohibitively inefficient and that there is no more efficient method to decrypt a ciphertext.

RSA Cryptosystem
  Relies on the assumption that factoring large numbers is difficult.
  Description:
    1. Bob selects two large prime numbers p and q
      p and q have several hundred digits
    2. Computing functions of p and q is practical as long as the computation time scales as a polynomial in the number of digits in a decimal expansion of p and q.
      One can compute the product of p and q
    3. However, performing a computation that scales with the value of p and q is infeasible.
    4. Given p and q, one can compute pq (in polynomial time).  Given pq, one cannot comput p and q (most algorithms are exponential at best)

RSA Steps:
  1. Bob selects two large prime numbers p and q
  2. Bob computes N = pq and Φ=(p-1)(q-1)
  3. Bob finds an integer e such that GCD(e,Φ)=1 (coprime)
      NOTE: bob may have to use Euclid's Extended Algorithm many times to determine e
  4. Bob computes the multiplicative inverse of e mod Φ:
      an integer d such that (e*d)modΦ = 1
      NOTE: multiply e by an integer d until mod Φ = 1
  5. Public key: N and e
  6. Private Key: d

RSA Encryption:
  C = m^e mod N
RSA Decryption:
  m = c^d mod N



