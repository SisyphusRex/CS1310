Finite State Machine
  FSM
  Finite State Automaton
  consist of a finite set of states with transitions between the states triggered by different input actions
  machine at rest in state: input could change state or not depending on input handling
  current state is the only state a machine remembers
  states Q {Locked, Unlocked}
  designated start state: Locked
    q_0 is start state
  actions I {Coin, Push}
    input is a sequence of actions from I

Transition Function δ (Delta)
  reaction of a FSM to input
  input to Transition Function is current state and input action:
    Q x I cartesian product set
  δ(Locked, Coin) = Unlocked
    δ(State, Input) = State
  δ: Q x I → Q

FSM with Output
  Output Set
    O = {Gumball, Return, Message, None}
  δ Domain
    Q x I
  δ Target for output function
    Q x O
  δ: Q x I → Q x O

Accepting State
  sequence of inputs is a string over finite input alphabet
  String is accepted if FSM ends up in accepting state after processing characters
  Accepting States are a DESIGNATED subset of states:
    A ⊆ Q

Parity of String
  whether number of 1s is even or odd

FSM Limitations
  Finite Memory and only the Current State
    cannot handle sets with infinite members

Regular Sets, Regular Expressions
  10* is {1, 10, 100, 1000...}
  0(0|1)* is any string starting with 0 then infinite number of 0 or 1
  (0*1)* is any number of zeros followed by 1, repeated
