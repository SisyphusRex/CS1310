Integer Division
  Input and output values must always be integers
  Dividend, divisor, quotient and remainder are all integers
Division Algorithm
  x|y , x divides y
  iff x≠0 and there is an integer k such that y = kx
  x∤y , x does not divide y
  If x|y, then y is a multiple of x, and x is factor of y

Linear Combination
  the sum of multiples of two numbers
  Example:
    3x + 7y
  Generic:
    sx + ty

Divisibility of Linear Combinations
  if x|y and x|z then x|(sy + tz)

Division Algorithm
  q: quotient 
  r: remainder
  d: divisor
  n: dividend
  n is an integer and d is positive integer
    then there are unique integers q and r with 0 ≤ r ≤ d-1 
    such that n = qd + r
  q = n div d
  r = n mod d
  
Modular Arithmetic
  Addition
    (x + y) mod m
  Multiplication
    (x * y) mod m

Ring
  set {0, 1, 2, ... , m-1}
  iff addition and multiplication are defined
  ℤₘ is ring symbol

Hash Function
  maps data items into array called hash table
  Hash Table should be larger than input data set
  h(n) = cn mod T
    n is input key
    c is a constant
    T is size of hash table
  ** NOTE: T and c should be coprime to reduce collisions

Pseudo-Random Number Generators
  produces numbers having statistical properties of random numbers but are deterministically generated
    deterministic: same output for given input
    probabilistic: introduce uncertainty and assign probabilities to outcomes

Linear Congruential Generator
  starts with initial value X_0 and generates each subsequent value as a function of the previous value according function:
  x_(n+1) = (aX_n + c) mod m
  each number generated lies in the range 0 ≤ g ≤ m-1

Congruence mod m
  Equivalent iff
  x mod m = y mod m
  x ≡ y(mod m)
Alternate Congruence mod m
  x ≡ y(mod m) iff m | (x-y)

Computing Arithmetic Operations mod m
  Let m be an integer > 1 and x and y are integers
  [(x mod m) + (y mod m)] mod m = [x + y] mod m
  [(x mod m)(y mod m)] mod m = [x*y] mod m

Prime
  p is prime if p > 1 and only factors are {1,p}
Composite
  factor other than 1 or p

Prime Factorization
  every positive integer greater than 1 can be expressed as a product of primes
  pf of 100 = 2 * 2 * 5 * 5
  pf of prime number has one factor 17 = 17
  pf of composite has multiple 243 = 3^5 or 112 = 2^4 * 7

Fundamental Theorem of Arithmetic
  Every positive integer p, where p > 1, can be expressed uniquely as a product of prime numbers where
    the prime factors are written in nondecreasing order

Multiplicity
  number of times prime factor p appears in the prime facorization

Greatest Common Divisor GCD
  x and y are not zero integers
  largest positive integer that is a factor of x and y
Least Common Multiple
  nonzero integers x and y
  smallest positive integer that is integer multiple of x and y
Relatively Prime / Coprime
  GCD(x,y) = 1

GCD from Prime Factorizations
  pf 24 = 2^3 * 3^1
  pf 50 = 2^1 * 5^2
  put factors not present in other pf into pf
  pf 24 = 2^3 * 3^1 * 5^0
  pf 50 = 2^1 * 3^0 * 5^2
  multiply factors with minimum exponent between to pf 2^min{3,1} * 3^min{1,0}...
  GCD(24,50) = 2^1 * 3^0 * 5^0 = 2
For LCM, use max exponent between pf 2^max{3,1} * 3^max{1,0}...
  LCM(24,50) = 2^3 * 3^1 * 5^2 = 600


  


